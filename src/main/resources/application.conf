proxy {
  #代理获取延时(second)
  fetchProxyDelay = 0
  #代理获取周期(second)
  fetchProxyInterval = 120
  #代理获取接口
  fetchProxyUrl = "http://10.1.1.39:30081/get?n="

  #代理获取数量
  fetchProxyNum = 100
}

eole {
  username = "3000010"
  key = "laJidKg9hfgsdOLNa0cmerjHaLnod"
//  tritonUrl = "http://triton.neoap.com"
  tritonHost = "http://10.1.29.250:30104"
  saveDir = "/eole/eole3/project/arachne2/"
  maxSave2EoleActorNum = 2
  bufferLength = 30
}

triton {
  username =arachnez
  password =123456
  host =10.1.29.250
  port =30102
}

remoteConf {
  #远程actor配置
  Sys {
    akka {
      actor {
        provider = "akka.remote.RemoteActorRefProvider"
      }
    }
  }
  #服务器
  remoteActorPath = "akka.tcp://arachne2WebActorSystem@10.1.1.39:30085/user/remoteServerActor"
}

//akka
akka {
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  # loggers = ["akka.event.Logging$DefaultLogger"]
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"
  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = off
  debug {
    # enable function of LoggingReceive, which is to log any received message at
    # DEBUG level
    receive = off
    # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill et.c.)
    autoreceive = off
    # enable DEBUG logging of actor lifecycle changes
    lifecycle = on
  }

  actor {
    default-dispatcher = {
      fork-join-executor {
        parallelism-factor = 8.0
        parallelism-max = 500
      }
    }
  }
}



slick.db {
  url = "jdbc:mysql://139.129.25.229:3306/agcInfo?characterEncoding=utf-8"
  user = "agcinfo"
  password = "wangchunze"
  maximumPoolSize = 5
  # The connection timeout ms
  connectionTimeout = 30000
  # The idle timeout
  idleTimeout = 300000

  # The max lifetime of a connection
  maxLifetime = 900000
}



